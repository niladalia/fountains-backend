parameters:
  app.api_token: '%env(resolve:APP_API_TOKEN)%'
  app.env: '%env(resolve:APP_ENV)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/AggregateRoot/'
            - '../src/Kernel.php'

 #   App\Command\GoogleAuthCommand:
 #     tags: ['console.command']

    App\Shared\Infrastructure\Symfony\ApiExceptionListener:
        arguments:
            $appEnv: '%app.env%'
        tags:
            - { name: kernel.event_listener, event: kernel.exception }

    App\Users\Domain\PasswordHasherRepository: '@App\Users\Infrastructure\SymfonyPasswordHasher'

    App\Shared\Domain\Event\EventBus: '@App\Shared\Infrastructure\Event\RabbitMqEventBus'



  # Google OAuth Port Interface is implemented by GoogleOAuthClient
    App\Users\Domain\Auth\GoogleOAuthClientInterface:
      class: App\Users\Infrastructure\Google\GoogleOAuthClient
      arguments:
        $googleClient: '@google.client'  # This injects the Google_Client service


    App\Users\Domain\EventHandler\SendWelcomeEmailHandler:
      tags: ['messenger.message_handler']

    App\Shared\Domain\Event\EventDispatcherInterface:
      class: App\Shared\Infrastructure\Event\SymfonyMessengerEventDispatcher

    # Define the Google Client service
    google.client:
      class: Google_Client
      calls:
        - method: 'setClientId'
          arguments:
            - '%env(GOOGLE_CLIENT_ID)%'
        - method: 'setClientSecret'
          arguments:
            - '%env(GOOGLE_CLIENT_SECRET)%'
        - method: 'setRedirectUri'
          arguments:
            - '%env(GOOGLE_REDIRECT_URI)%'
        - method: 'addScope'
          arguments:
            - 'email'

    App\Shared\Infrastructure\Symfony\Validation\EnumConstraintValidator:
          tags: ['validator.constraint_validator']

    # FountainRepository service definition
    App\Fountains\Domain\FountainRepository:
        class: App\Fountains\Infrastructure\Persistence\Doctrine\Repository\DoctrineFountainRepository
        arguments:
            $registry: '@doctrine'
        public: false # injectable but not directly accessible in the dependencies container
        shared: true # singleton in the context of a single request (different requests have different instances)
